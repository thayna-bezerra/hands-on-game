# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hands-on-game.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import math
import random
import sys

import cv2
import numpy as np
from cvzone.ClassificationModule import Classifier
from cvzone.HandTrackingModule import HandDetector
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *


class Worker1(QThread):
    ImageUpdate = pyqtSignal(QImage)
    TextUpdate = pyqtSignal(str)
    def run(self):
        self.ThreadActive = True
        cap = cv2.VideoCapture(0)

        detector = HandDetector(maxHands=1)
        classifier = Classifier("Model/keras_model.h5", "Model/labels.txt")
        offset = 20
        imgSize = 300
        labels = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
        
        while self.ThreadActive:
            success, img = cap.read()
            if success:
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                imgOutput = img.copy()
                hands, img = detector.findHands(img)
                if hands:
                    hand = hands[0]
                    x, y, w, h = hand['bbox']

                    imgWhite = np.ones((imgSize, imgSize, 3), np.uint8)*255
                    imgCrop = img[y-offset:y+h+offset, x-offset:x+w+offset]

                    aspectRatio = h/w

                    height = imgCrop.shape[0]
                    width = imgCrop.shape[1]

                    if aspectRatio > 1:
                        k = imgSize/h
                        wCal = math.ceil(k * w)
                        if (height != 0 and width != 0):
                                imgResize = cv2.resize(imgCrop, (wCal, imgSize), interpolation=cv2.INTER_CUBIC)
                                wGap = math.ceil((imgSize - wCal) / 2)
                                imgWhite[:, wGap:wCal+wGap] = imgResize
                                prediction, index = classifier.getPrediction(imgWhite, draw=False)
                                print(prediction, index)

                    else:
                        k = imgSize / w
                        hCal = math.ceil(k * h)
                        if (height != 0 and width != 0):
                                imgResize = cv2.resize(imgCrop, (imgSize, hCal), interpolation=cv2.INTER_CUBIC)
                                hGap = math.ceil((imgSize - hCal) / 2)
                                imgWhite[hGap:hCal+hGap, :] = imgResize
                                prediction, index = classifier.getPrediction(imgWhite, draw=False)
                    
                    if (height != 0 and width != 0):
                        cv2.rectangle(imgOutput, (x-offset, y-offset-50),
                                        (x-offset+90, y-offset-50+50), (250, 231, 93), cv2.FILLED),
                        cv2.putText(imgOutput, labels[index], (x, y-26), cv2.FONT_HERSHEY_COMPLEX, 1.7, (255, 255, 255), 2)
                        self.TextUpdate.emit(labels[index])
                        cv2.rectangle(imgOutput, (x-offset, y-offset),
                                        (x + w+offset, y + h+offset), (250, 231, 93), 4),

                
                ConvertToQtFormat = QImage(imgOutput.data, imgOutput.shape[1], imgOutput.shape[0], QImage.Format_RGB888)
                Pic = ConvertToQtFormat.scaled(imgOutput.shape[1] * 0.8, imgOutput.shape[0] * 0.8, Qt.KeepAspectRatio)
                self.ImageUpdate.emit(Pic)

    def stop(self):
        self.ThreadActive = False
        self.quit()


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(625, 425)
        Form.setMinimumSize(QSize(625, 425))
        Form.setMaximumSize(QSize(625, 425))
        Form.setStyleSheet("background-color: rgb(88, 79, 135);\n"
"border-radius: 24px;")
        self.section_palavra = QFrame(Form)
        self.section_palavra.setGeometry(QRect(180, -120, 251, 181))
        self.section_palavra.setStyleSheet("background-color: rgb(48, 51, 71, 0.5);\n"
"border-radius: 39px;\n"
"")
        self.section_palavra.setFrameShape(QFrame.StyledPanel)
        self.section_palavra.setFrameShadow(QFrame.Raised)
        self.section_palavra.setObjectName("section_palavra")
        self.palavra = QTextBrowser(self.section_palavra)
        self.palavra.setGeometry(QRect(30, 120, 221, 61))
        self.palavra.setStyleSheet("letter-spacing: 10px; \n"
"background-color: transparent;\n"
"font-weight: bold; \n"
"color: rgb(250, 231, 93);")
        self.palavra.setObjectName("palavra")
        self.container_cam = QLabel(Form)
        self.container_cam.setGeometry(QRect(100, 140, 421, 271))
        self.container_cam.setStyleSheet("background-color: rgb(48, 51, 71, 0.5);")
        self.container_cam.setFrameShape(QFrame.StyledPanel)
        self.container_cam.setFrameShadow(QFrame.Raised)
        self.container_cam.setObjectName("container_cam")
        self.correct = QFrame(Form)
        self.correct.setGeometry(QRect(530, 320, 91, 101))
        self.correct.setFrameShape(QFrame.StyledPanel)
        self.correct.setFrameShadow(QFrame.Raised)
        self.correct.setObjectName("correct")
        self.hand = QFrame(Form)
        self.hand.setGeometry(QRect(-30, 290, 171, 161))
        self.hand.setStyleSheet("image: url(0.png);\n"
"background-color: transparent;")
        self.hand.setFrameShape(QFrame.StyledPanel)
        self.hand.setFrameShadow(QFrame.Raised)
        self.hand.setObjectName("hand")
        self.div_letters = QFrame(Form)
        self.div_letters.setGeometry(QRect(150, 110, 311, 21))
        self.div_letters.setFrameShape(QFrame.StyledPanel)
        self.div_letters.setFrameShadow(QFrame.Raised)
        self.div_letters.setObjectName("div_letters")
        self.horizontalLayout = QHBoxLayout(self.div_letters)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.palavraFlag = 'SAMBA'
        self.list_object = []
        self.respostas = 'X' * len(self.palavraFlag)

        for i in range(len(self.palavraFlag)):
            letra = QTextBrowser(Form)
            eixo_x = 100
            letra.setStyleSheet("letter-spacing: 10px; \n"
"background-color: transparent;\n"
"font-weight: bold; \n"
"color: rgb(250, 231, 93);")
            letra.setObjectName("Letter{}".format(i))
            letra.setGeometry(QRect(eixo_x + (59 * i), 60, 71, 81))
            letra.raise_()
            self.list_object.append(letra)

        self.div_letters.raise_()
        self.hand.raise_()
        self.section_palavra.raise_()
        self.container_cam.raise_()
        self.correct.raise_()

        self.retranslateUi(Form)
        QMetaObject.connectSlotsByName(Form)

        self.Worker1 = Worker1()

        self.Worker1.start()
        self.Worker1.ImageUpdate.connect(self.ImageUpdateSlot)
        self.Worker1.TextUpdate.connect(self.TextUpdateSlot)

    def ImageUpdateSlot(self, Image):
        self.container_cam.setPixmap(QPixmap.fromImage(Image))
        
    def TextUpdateSlot(self, message):
        #self.palavraFlag.setText(f'x-> {message}')
        is_correct = False
        for i in range(len(self.palavraFlag)):
             if type(message) == str:
                if self.palavraFlag[i] == message:
                        font = QFont()  # Cria uma nova fonte
                        font.setPointSize(34)  # Define o tamanho da fonte para 16 (ou outro tamanho desejado)
                        self.list_object[i].setFont(font)  # Aplica a nova fonte ao QLabel
                        self.list_object[i].setText(message)
                        is_correct = True
        
        list_for_x = list(range(525,535))
        list_for_y = list(range(315,325))

        numero_sorteado_x = random.choice(list_for_x)
        numero_sorteado_y = random.choice(list_for_y)

        if is_correct:
            self.correct.setStyleSheet("image: url(correct.png);\n"
"background-color: transparent;")
            self.correct.setGeometry(QRect(numero_sorteado_x, numero_sorteado_y, 91, 101))
        else:
            self.correct.setStyleSheet("image: url(loser.png);\n"
"background-color: transparent;")
            self.correct.setGeometry(QRect(numero_sorteado_x, numero_sorteado_y, 91, 101))
                        
                
    def CancelFeed(self):
        self.Worker1.stop()

    def retranslateUi(self, Form):
        _translate = QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Hands On Game"))
        self.palavra.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:600; font-style:normal; letter-spacing:10px;\">\n"
'<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:30pt;\">%s</span></p></body></html>' % self.palavraFlag))
        
        for i in range(len(self.list_object)):
                self.list_object[i].setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:600; font-style:normal; letter-spacing:10px;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:36pt; color:#ffffff;\">%s</span></p></body></html>" % self.respostas[i]))


if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    Form = QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
